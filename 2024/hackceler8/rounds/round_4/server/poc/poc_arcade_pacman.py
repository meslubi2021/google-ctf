# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from poc.helper import ReplayHelper
def replay_iter_func(replay):
  start_stars = replay.game.match_flags.stars()
  # Enter the arcade.
  replay.teleport(1809, 2433)
  replay.enqueue(['e'] + [''] * 123)
  # 1st level.
  replay.enqueue(['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 39 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + ['']*19)
  # 2nd level.
  replay.enqueue(['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 39 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19)
  # 3rd level.
  replay.enqueue(['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['a'] + [''] * 19 + ['a'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['s'] + [''] * 19 + ['s'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['d'] + [''] * 19 + ['d'] + [''] * 19 + ['w'] + [''] * 19 + ['w'] + [''] * 19 + ['d'] + [''] * 19)
  # Wait for the game to exit.
  replay.enqueue(['']*90)
  yield
  # Make sure we got the key.
  found = False
  for i in replay.game.items:
      if i.name == "key":
          found = True
          break
  assert found
  # Free the NPC using the key.
  replay.enter_map("beach")
  replay.teleport(5344, 720)
  replay.enqueue([''] * 89 + ['L'] * 6 + ['La'] * 65 + ['L'] * 17 + ['Ld'] * 17 + ['L'] * 14 + ['Le'] * 4 + ['L'] * 5 + ['Ld'] * 60 + ['L'] + [''] * 3 + ['e'] * 3 + [''] * 3 + ['e'] * 3 + [''] * 4 + ['e'] * 3 + [''] * 3 + ['e'] * 4 + [''] * 39 + ['d'] * 33 + ['da'] + ['a'] * 6 + [''] * 34 + ['ï¿©'] * 82)
  yield
  # Make sure we freed the NPC.
  assert replay.game.match_flags.stars() > start_stars
  replay.exit()
if __name__ == '__main__':
  replay = ReplayHelper()
  replay.start_game(replay_iter_func)
